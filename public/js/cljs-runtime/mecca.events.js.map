{"version":3,"sources":["mecca/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","_","js/AudioContext","re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$3","day8.re_frame.undo.undoable.cljs$core$IFn$_invoke$arity$1","p__59161","vec__59162","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","db","time","pitch","cljs.core.update.cljs$core$IFn$_invoke$arity$3","note","p1__59160#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__59165","vec__59166","file","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","p__59178","vec__59180","samples","p__59185","vec__59186","beats-per-measure","p__59195","vec__59196","notes","p__59205","vec__59206","new-time","p__59209","vec__59214","mecca.music/play-song!","cljs.core/deref","G__59218","re-frame.core/subscribe","p__59219","vec__59220","p__59224","vec__59226","cljs.core/not","p__59230","vec__59233","p__59238","vec__59239","p__59242","vec__59244","p__59250","vec__59252","G__59255","re-frame.core/dispatch","p__59256","vec__59257","pos","p__59260","vec__59261","instrument","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","p__59265","vec__59266","p__59271","vec__59273","G__59276","beat","G__59277","to-play","p1__59269#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","G__59278","p1__59270#","p__59281","vec__59282","beats","p1__59279#","p__59287","vec__59288","p1__59286#","p__59292","vec__59293","p__59299","vec__59300","p1__59297#","p__59304","vec__59305","p__59309","vec__59310","tempo","p__59314","vec__59315","p1__59313#","p__59320","vec__59321","p1__59319#","p__59325","vec__59328","key","p__59332","vec__59334","p__59337","vec__59338","x","p__59344","vec__59345","G__59349","seconds-per-beat","p1__59342#","cljs.core/inc","p__59350","vec__59352","mecca.music/play-note","p__59358","vec__59359","G__59362","G__59363","p1__59355#","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/into","p__59367","vec__59369","G__59372","G__59373","mecca.music/play-sample","G__59374","cljs.core/conj","G__59375","p__59379","vec__59381","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__59387","G__59388","p1__59377#","p1__59376#","cljs.core.get.cljs$core$IFn$_invoke$arity$2","G__59389","p1__59378#","p__59392","vec__59393","p__59396","vec__59398","xml","p__59401","vec__59402","p__59407","vec__59408","G__59411","mecca.songs.megaman/megaman","p__59412","vec__59413","G__59416","mecca.songs.city/city","p__59417","vec__59418","G__59421","mecca.songs.zelda/zelda"],"sourcesContent":["(ns mecca.events\r\n  (:require\r\n   [re-frame.core :refer [reg-event-db reg-event-fx dispatch subscribe]]\r\n   [re-pressed.core :as rp]\r\n   [day8.re-frame.undo :as undo :refer [undoable]]\r\n   [mecca.mario :as mario :refer [mario]]\r\n   [mecca.songs.megaman :as megaman]\r\n   [mecca.songs.zelda :as zelda]\r\n   [mecca.songs.city :as city]\r\n   [mecca.music :as music]\r\n   [goog.events :refer [listen unlisten]])\r\n  (:import [goog.events EventType]))\r\n\r\n(reg-event-db\r\n :initialize-db\r\n (fn [_ _]\r\n   {:audio-context (js/AudioContext.)\r\n    :samples nil\r\n    :focused-note-pos [nil nil]\r\n    :eraser? false\r\n    :playing? false\r\n    :play-start 0\r\n    :jumping? false\r\n    :sharp? false\r\n    :repeat? false\r\n    :loop-end nil\r\n    :current-position 0\r\n    :current-note 0\r\n    :next-note-time 0.0\r\n    :notes-in-queue []\r\n    :editor-beat-start 1\r\n    :instrument 1\r\n    :array-buffer nil\r\n    :time 0\r\n    :time-signature 4\r\n    :tempo 120\r\n    :notes []\r\n    :mario-x 16\r\n    :mario-y 61\r\n    :mario-jump 0\r\n    :mario-run 1\r\n    :xml \"\"\r\n    :file-upload \"\"}))\r\n\r\n(reg-event-db\r\n :remove-note\r\n (undoable \"remove note\")\r\n (fn [db [_ time pitch]]\r\n   (update db :notes\r\n           (fn [note]\r\n             (remove #(and (= time (:time %))\r\n                           (= pitch (:pitch %)))\r\n                     note)))))\r\n\r\n(reg-event-db\r\n :file-upload\r\n (fn [db [_ file]]\r\n      (assoc db :file-upload file)))\r\n\r\n(reg-event-db\r\n :load-samples\r\n (fn [db [_ samples]]\r\n   (assoc db :samples samples)))\r\n\r\n(reg-event-db\r\n :set-time-signature\r\n (fn [db [_ beats-per-measure]]\r\n   (update db :time-signature beats-per-measure)))\r\n\r\n(reg-event-db\r\n :set-notes\r\n (fn [db [_ notes]]\r\n   (assoc db :notes notes)))\r\n\r\n(reg-event-db                 ;; usage:  (dispatch [:timer a-js-Date])\r\n :timer                         ;; every second an event of this kind will be dispatched\r\n (fn [db [_ new-time]]          ;; note how the 2nd parameter is destructured to obtain the data value\r\n   (assoc db :time new-time)))\r\n\r\n(reg-event-db\r\n :play-on\r\n (fn [db [_ _]]\r\n   (music/play-song!)\r\n   (assoc\r\n    (assoc db :play-start (.-currentTime @(subscribe [:audio-context])))\r\n    :playing? true)\r\n    ))\r\n\r\n(reg-event-db\r\n :sharp-on\r\n (fn [db [_ _]]\r\n   (assoc db :sharp? true)))\r\n\r\n(reg-event-db\r\n :sharp-toggle\r\n (fn [db [_ _]]\r\n   (update db :sharp? not)))\r\n\r\n(reg-event-db\r\n :eraser-toggle\r\n (fn [db [_ _]]\r\n   (update db :eraser? not)))\r\n\r\n(reg-event-db\r\n :sharp-off\r\n (fn [db [_ _]]\r\n   (assoc db :sharp? false)))\r\n\r\n(reg-event-db\r\n :pause\r\n (fn [db [_ _]]\r\n   (assoc db :playing? false)))\r\n\r\n(reg-event-db\r\n :stop\r\n (fn [db [_ _]]\r\n   (dispatch [:reset-editor])\r\n   (assoc\r\n    (assoc db :playing? false)\r\n    :current-position 0)))\r\n\r\n(reg-event-db\r\n :update-focus-note\r\n (fn [db [_ pos]]\r\n   (assoc db :focused-note-pos pos)))\r\n\r\n(reg-event-db\r\n :select-instrument\r\n (fn [db [_ instrument]]\r\n   (assoc db \r\n          :instrument instrument\r\n          :eraser? false)))\r\n\r\n(reg-event-db\r\n :play-off\r\n (fn [db [_ _]]\r\n   (assoc db :playing? false)))\r\n\r\n(reg-event-db\r\n :advance-position\r\n (fn [db [_ _]]\r\n   (let [notes (subscribe [:notes])\r\n         beat (subscribe [:current-position])\r\n         to-play (filter #(= (+ 1 @beat) (:time %)) @notes)]\r\n     (if (< 4 @beat)\r\n       (dispatch [:advance-editor 0.5]))\r\n     #_(doall (for [{:keys [instrument pitch]} to-play]\r\n                (music/play-sample instrument (if @(subscribe [:sharp?]) (+ 0.5 pitch) pitch))))\r\n     (update db :current-position #(+ 0.5 %)))))\r\n\r\n(reg-event-db\r\n :advance-editor\r\n (fn [db [_ beats]]\r\n   (update db :editor-beat-start #(+ beats %))))\r\n\r\n(reg-event-db\r\n :move-mario\r\n (fn [db [_ _]]\r\n   (update db :mario-x #(+ 10 %))))\r\n\r\n(reg-event-db\r\n :reset-editor\r\n (fn [db [_ _]]\r\n   (assoc (assoc db :editor-beat-start 1)\r\n          :mario-x 16)))\r\n\r\n(reg-event-db\r\n :retract-editor\r\n (fn [db [_ _]]\r\n   (update db :editor-beat-start #(- % 0.5))))\r\n\r\n(reg-event-db\r\n :reset-position\r\n (fn [db [_ _]]\r\n   (assoc db :current-position 0)))\r\n\r\n(reg-event-db\r\n :set-tempo\r\n (fn [db [_ tempo]]\r\n   (assoc db :tempo tempo)))\r\n\r\n(reg-event-db\r\n :inc-tempo\r\n (fn [db [_ tempo]]\r\n   (update db :tempo #(+ 8 %))))\r\n\r\n(reg-event-db\r\n :dec-tempo\r\n (fn [db [_ tempo]]\r\n   (update db :tempo #(- % 8))))\r\n\r\n(reg-event-db\r\n :set-key\r\n (fn [db [_ key]]\r\n   (assoc db :key key)))\r\n\r\n(reg-event-db\r\n :repeat-toggle\r\n (fn [db [_ _]]\r\n   (update db :repeat? not)))\r\n\r\n(reg-event-db\r\n :set-loop-end\r\n (fn [db [_ x]]\r\n   (assoc db :loop-end x)))\r\n\r\n(reg-event-db\r\n :next-note\r\n (fn [db [_ _]]\r\n   (let [tempo (subscribe [:tempo])\r\n         seconds-per-beat (/ 60.0 @tempo)]\r\n     (update \r\n      (update db :current-note inc)\r\n      :next-note-time #(+ % seconds-per-beat)))))\r\n\r\n(reg-event-db\r\n :play-note\r\n (fn [db [_ pitch]]\r\n   (music/play-note pitch)\r\n   (assoc db :notes-in-queue [{:pitch pitch\r\n                               :time  0}])))\r\n\r\n(reg-event-db\r\n :schedule-note\r\n (fn [db [_ _]]\r\n   (let [notes (subscribe [:notes])\r\n         beat (subscribe [:current-note])\r\n         to-play (filter #(= (+ 1 @beat) (:time %)) @notes)]\r\n     (update db :notes-in-queue\r\n             into to-play))))\r\n\r\n(reg-event-db\r\n :add-note\r\n (undoable \"add note\")\r\n (fn [db [_ instrument time pitch]]\r\n   (if (= (.-state @(subscribe [:audio-context])) \"suspended\")\r\n     (.resume @(subscribe [:audio-context])))\r\n   (music/play-sample instrument (if @(subscribe [:sharp?]) (inc pitch) pitch))\r\n   (update db :notes\r\n           conj \r\n           {:time time\r\n            :instrument instrument\r\n            :pitch (if @(subscribe [:sharp?])\r\n                    (inc pitch) pitch)})))\r\n\r\n\r\n;; TODO This is gross.\r\n;; Make it so the run counter only runs when needed.\r\n;; But this tick function needs to be refactored.\r\n;; Seriously it's like 50 shades of awful.\r\n;; Read about effectful handlers some more,\r\n;; and learn to use reg-event-fx.\r\n\r\n(reg-event-db\r\n :tick!\r\n (fn [db [_ _]]\r\n   (if (and (not= 0 @(subscribe [:mario-jump]))\r\n            @(subscribe [:playing?]))\r\n     (assoc\r\n      (update\r\n       (update db :mario-run #(if (= % 12) 0 (inc %)))\r\n       :mario-jump #(if (= 8 %) 0 (inc %)))\r\n      :mario-y (- 61\r\n                  (get [5 10 15 25 30 25 15 5]\r\n                       @(subscribe [:mario-jump]))))\r\n     (update db :mario-run #(if (= % 12) 0 (inc %))))))\r\n\r\n(reg-event-db\r\n :jump!\r\n (fn [db [_ _]]\r\n   (assoc db :mario-jump 1)))\r\n\r\n(reg-event-db\r\n :submit-xml\r\n (fn [db [_ xml]]\r\n   (assoc db :xml xml)))\r\n\r\n(reg-event-db\r\n :load-song\r\n (fn [db [_ notes]]\r\n   (assoc db :notes notes)))\r\n\r\n(reg-event-db\r\n :load-megaman\r\n (fn [db [_ notes]]\r\n   (dispatch [:set-tempo 260])\r\n   (assoc db :notes\r\n          megaman/megaman)))\r\n\r\n(reg-event-db\r\n :load-castle\r\n (fn [db [_ notes]]\r\n   (dispatch [:set-tempo 150])\r\n   (assoc db :notes city/city)))\r\n\r\n(reg-event-db\r\n :load-zelda\r\n (fn [db [_ notes]]\r\n   (dispatch [:set-tempo 390])\r\n   (assoc db :notes zelda/zelda)))\r\n\r\n"]}