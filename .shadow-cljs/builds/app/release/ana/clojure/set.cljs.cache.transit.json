["^ ","~:output",["^ ","~:js","goog.provide('clojure.set');\r\nclojure.set.bubble_max_key = (function clojure$set$bubble_max_key(k,coll){\r\n\r\nvar max = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.max_key,k,coll);\r\nreturn cljs.core.cons(max,cljs.core.remove.cljs$core$IFn$_invoke$arity$2((function (p1__53449_SHARP_){\r\nreturn (max === p1__53449_SHARP_);\r\n}),coll));\r\n});\r\n/**\r\n * Return a set that is the union of the input sets\r\n */\r\nclojure.set.union = (function clojure$set$union(var_args){\r\nvar G__53454 = arguments.length;\r\nswitch (G__53454) {\r\ncase 0:\r\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$0();\r\n\r\nbreak;\r\ncase 1:\r\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nvar args_arr__4810__auto__ = [];\r\nvar len__4789__auto___53494 = arguments.length;\r\nvar i__4790__auto___53495 = (0);\r\nwhile(true){\r\nif((i__4790__auto___53495 < len__4789__auto___53494)){\r\nargs_arr__4810__auto__.push((arguments[i__4790__auto___53495]));\r\n\r\nvar G__53496 = (i__4790__auto___53495 + (1));\r\ni__4790__auto___53495 = G__53496;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4811__auto__ = (new cljs.core.IndexedSeq(args_arr__4810__auto__.slice((2)),(0),null));\r\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4811__auto__);\r\n\r\n}\r\n});\r\n\r\n(clojure.set.union.cljs$core$IFn$_invoke$arity$0 = (function (){\r\nreturn cljs.core.PersistentHashSet.EMPTY;\r\n}));\r\n\r\n(clojure.set.union.cljs$core$IFn$_invoke$arity$1 = (function (s1){\r\nreturn s1;\r\n}));\r\n\r\n(clojure.set.union.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\r\nif((cljs.core.count(s1) < cljs.core.count(s2))){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s2,s1);\r\n} else {\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s1,s2);\r\n}\r\n}));\r\n\r\n(clojure.set.union.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\r\nvar bubbled_sets = clojure.set.bubble_max_key(cljs.core.count,cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\r\n}));\r\n\r\n/** @this {Function} */\r\n(clojure.set.union.cljs$lang$applyTo = (function (seq53451){\r\nvar G__53452 = cljs.core.first(seq53451);\r\nvar seq53451__$1 = cljs.core.next(seq53451);\r\nvar G__53453 = cljs.core.first(seq53451__$1);\r\nvar seq53451__$2 = cljs.core.next(seq53451__$1);\r\nvar self__4776__auto__ = this;\r\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__53452,G__53453,seq53451__$2);\r\n}));\r\n\r\n(clojure.set.union.cljs$lang$maxFixedArity = (2));\r\n\r\n/**\r\n * Return a set that is the intersection of the input sets\r\n */\r\nclojure.set.intersection = (function clojure$set$intersection(var_args){\r\nvar G__53460 = arguments.length;\r\nswitch (G__53460) {\r\ncase 1:\r\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nvar args_arr__4810__auto__ = [];\r\nvar len__4789__auto___53500 = arguments.length;\r\nvar i__4790__auto___53501 = (0);\r\nwhile(true){\r\nif((i__4790__auto___53501 < len__4789__auto___53500)){\r\nargs_arr__4810__auto__.push((arguments[i__4790__auto___53501]));\r\n\r\nvar G__53502 = (i__4790__auto___53501 + (1));\r\ni__4790__auto___53501 = G__53502;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4811__auto__ = (new cljs.core.IndexedSeq(args_arr__4810__auto__.slice((2)),(0),null));\r\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4811__auto__);\r\n\r\n}\r\n});\r\n\r\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = (function (s1){\r\nreturn s1;\r\n}));\r\n\r\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\r\nwhile(true){\r\nif((cljs.core.count(s2) < cljs.core.count(s1))){\r\nvar G__53503 = s2;\r\nvar G__53504 = s1;\r\ns1 = G__53503;\r\ns2 = G__53504;\r\ncontinue;\r\n} else {\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (s1,s2){\r\nreturn (function (result,item){\r\nif(cljs.core.contains_QMARK_(s2,item)){\r\nreturn result;\r\n} else {\r\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\r\n}\r\n});})(s1,s2))\r\n,s1,s1);\r\n}\r\nbreak;\r\n}\r\n}));\r\n\r\n(clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\r\nvar bubbled_sets = clojure.set.bubble_max_key((function (p1__53455_SHARP_){\r\nreturn (- cljs.core.count(p1__53455_SHARP_));\r\n}),cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.intersection,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\r\n}));\r\n\r\n/** @this {Function} */\r\n(clojure.set.intersection.cljs$lang$applyTo = (function (seq53457){\r\nvar G__53458 = cljs.core.first(seq53457);\r\nvar seq53457__$1 = cljs.core.next(seq53457);\r\nvar G__53459 = cljs.core.first(seq53457__$1);\r\nvar seq53457__$2 = cljs.core.next(seq53457__$1);\r\nvar self__4776__auto__ = this;\r\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__53458,G__53459,seq53457__$2);\r\n}));\r\n\r\n(clojure.set.intersection.cljs$lang$maxFixedArity = (2));\r\n\r\n/**\r\n * Return a set that is the first set without elements of the remaining sets\r\n */\r\nclojure.set.difference = (function clojure$set$difference(var_args){\r\nvar G__53465 = arguments.length;\r\nswitch (G__53465) {\r\ncase 1:\r\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\r\n\r\nbreak;\r\ncase 2:\r\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ndefault:\r\nvar args_arr__4810__auto__ = [];\r\nvar len__4789__auto___53509 = arguments.length;\r\nvar i__4790__auto___53510 = (0);\r\nwhile(true){\r\nif((i__4790__auto___53510 < len__4789__auto___53509)){\r\nargs_arr__4810__auto__.push((arguments[i__4790__auto___53510]));\r\n\r\nvar G__53511 = (i__4790__auto___53510 + (1));\r\ni__4790__auto___53510 = G__53511;\r\ncontinue;\r\n} else {\r\n}\r\nbreak;\r\n}\r\n\r\nvar argseq__4811__auto__ = (new cljs.core.IndexedSeq(args_arr__4810__auto__.slice((2)),(0),null));\r\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4811__auto__);\r\n\r\n}\r\n});\r\n\r\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$1 = (function (s1){\r\nreturn s1;\r\n}));\r\n\r\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\r\nif((cljs.core.count(s1) < cljs.core.count(s2))){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,item){\r\nif(cljs.core.contains_QMARK_(s2,item)){\r\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\r\n} else {\r\nreturn result;\r\n}\r\n}),s1,s1);\r\n} else {\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.disj,s1,s2);\r\n}\r\n}));\r\n\r\n(clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.difference,s1,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(sets,s2));\r\n}));\r\n\r\n/** @this {Function} */\r\n(clojure.set.difference.cljs$lang$applyTo = (function (seq53462){\r\nvar G__53463 = cljs.core.first(seq53462);\r\nvar seq53462__$1 = cljs.core.next(seq53462);\r\nvar G__53464 = cljs.core.first(seq53462__$1);\r\nvar seq53462__$2 = cljs.core.next(seq53462__$1);\r\nvar self__4776__auto__ = this;\r\nreturn self__4776__auto__.cljs$core$IFn$_invoke$arity$variadic(G__53463,G__53464,seq53462__$2);\r\n}));\r\n\r\n(clojure.set.difference.cljs$lang$maxFixedArity = (2));\r\n\r\n/**\r\n * Returns a set of the elements for which pred is true\r\n */\r\nclojure.set.select = (function clojure$set$select(pred,xset){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,k){\r\nif(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(k) : pred.call(null,k)))){\r\nreturn s;\r\n} else {\r\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(s,k);\r\n}\r\n}),xset,xset);\r\n});\r\n/**\r\n * Returns a rel of the elements of xrel with only the keys in ks\r\n */\r\nclojure.set.project = (function clojure$set$project(xrel,ks){\r\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__53466_SHARP_){\r\nreturn cljs.core.select_keys(p1__53466_SHARP_,ks);\r\n}),xrel));\r\n});\r\n/**\r\n * Returns the map with the keys in kmap renamed to the vals in kmap\r\n */\r\nclojure.set.rename_keys = (function clojure$set$rename_keys(map,kmap){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,p__53467){\r\nvar vec__53468 = p__53467;\r\nvar old = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53468,(0),null);\r\nvar new$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53468,(1),null);\r\nif(cljs.core.contains_QMARK_(map,old)){\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new$,cljs.core.get.cljs$core$IFn$_invoke$arity$2(map,old));\r\n} else {\r\nreturn m;\r\n}\r\n}),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,map,cljs.core.keys(kmap)),kmap);\r\n});\r\n/**\r\n * Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\r\n */\r\nclojure.set.rename = (function clojure$set$rename(xrel,kmap){\r\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__53471_SHARP_){\r\nreturn clojure.set.rename_keys(p1__53471_SHARP_,kmap);\r\n}),xrel));\r\n});\r\n/**\r\n * Returns a map of the distinct values of ks in the xrel mapped to a\r\n *   set of the maps in xrel with the corresponding values of ks.\r\n */\r\nclojure.set.index = (function clojure$set$index(xrel,ks){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,x){\r\nvar ik = cljs.core.select_keys(x,ks);\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.PersistentHashSet.EMPTY),x));\r\n}),cljs.core.PersistentArrayMap.EMPTY,xrel);\r\n});\r\n/**\r\n * Returns the map with the vals mapped to the keys.\r\n */\r\nclojure.set.map_invert = (function clojure$set$map_invert(m){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m__$1,p__53472){\r\nvar vec__53473 = p__53472;\r\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53473,(0),null);\r\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53473,(1),null);\r\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m__$1,v,k);\r\n}),cljs.core.PersistentArrayMap.EMPTY,m);\r\n});\r\n/**\r\n * When passed 2 rels, returns the rel corresponding to the natural\r\n *   join. When passed an additional keymap, joins on the corresponding\r\n *   keys.\r\n */\r\nclojure.set.join = (function clojure$set$join(var_args){\r\nvar G__53481 = arguments.length;\r\nswitch (G__53481) {\r\ncase 2:\r\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\r\n\r\nbreak;\r\ncase 3:\r\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\r\n\r\nbreak;\r\ndefault:\r\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\r\n\r\n}\r\n});\r\n\r\n(clojure.set.join.cljs$core$IFn$_invoke$arity$2 = (function (xrel,yrel){\r\nif(((cljs.core.seq(xrel)) && (cljs.core.seq(yrel)))){\r\nvar ks = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(cljs.core.first(xrel))),cljs.core.set(cljs.core.keys(cljs.core.first(yrel))));\r\nvar vec__53482 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel], null));\r\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53482,(0),null);\r\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53482,(1),null);\r\nvar idx = clojure.set.index(r,ks);\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret,x){\r\nvar found = (function (){var G__53485 = cljs.core.select_keys(x,ks);\r\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__53485) : idx.call(null,G__53485));\r\n})();\r\nif(cljs.core.truth_(found)){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__53476_SHARP_,p2__53477_SHARP_){\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__53476_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__53477_SHARP_,x], 0)));\r\n}),ret,found);\r\n} else {\r\nreturn ret;\r\n}\r\n}),cljs.core.PersistentHashSet.EMPTY,s);\r\n} else {\r\nreturn cljs.core.PersistentHashSet.EMPTY;\r\n}\r\n}));\r\n\r\n(clojure.set.join.cljs$core$IFn$_invoke$arity$3 = (function (xrel,yrel,km){\r\nvar vec__53486 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel,clojure.set.map_invert(km)], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel,km], null));\r\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53486,(0),null);\r\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53486,(1),null);\r\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__53486,(2),null);\r\nvar idx = clojure.set.index(r,cljs.core.vals(k));\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret,x){\r\nvar found = (function (){var G__53489 = clojure.set.rename_keys(cljs.core.select_keys(x,cljs.core.keys(k)),k);\r\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__53489) : idx.call(null,G__53489));\r\n})();\r\nif(cljs.core.truth_(found)){\r\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__53478_SHARP_,p2__53479_SHARP_){\r\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__53478_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__53479_SHARP_,x], 0)));\r\n}),ret,found);\r\n} else {\r\nreturn ret;\r\n}\r\n}),cljs.core.PersistentHashSet.EMPTY,s);\r\n}));\r\n\r\n(clojure.set.join.cljs$lang$maxFixedArity = 3);\r\n\r\n/**\r\n * Is set1 a subset of set2?\r\n */\r\nclojure.set.subset_QMARK_ = (function clojure$set$subset_QMARK_(set1,set2){\r\nreturn (((cljs.core.count(set1) <= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__53490_SHARP_){\r\nreturn cljs.core.contains_QMARK_(set2,p1__53490_SHARP_);\r\n}),set1)));\r\n});\r\n/**\r\n * Is set1 a superset of set2?\r\n */\r\nclojure.set.superset_QMARK_ = (function clojure$set$superset_QMARK_(set1,set2){\r\nreturn (((cljs.core.count(set1) >= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__53492_SHARP_){\r\nreturn cljs.core.contains_QMARK_(set1,p1__53492_SHARP_);\r\n}),set2)));\r\n});\r\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$create-react-class","~$module$node_modules$create_react_class$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^O","~$goog","^P"],"~:seen",["^H",[]],"~:uses",null,"~:require-macros",["^ ","^O","^O"],"~:form",["~#list",["~$ns","^J"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^P","^O"]],"^L","^J","~:resource-id",["~:shadow.build.classpath/resource","clojure/set.cljs"],"~:compiled-at",1607248061776,"~:resource-name","clojure/set.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Set operations such as union/intersection.\"\n       :author \"Rich Hickey\"}\n       clojure.set)\n\n(defn- bubble-max-key [k coll]\n  \"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.\"\n  (let [max (apply max-key k coll)]\n    (cons max (remove #(identical? max %) coll))))\n\n(defn union\n  \"Return a set that is the union of the input sets\"\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s1) (count s2))\n       (reduce conj s2 s1)\n       (reduce conj s1 s2)))\n  ([s1 s2 & sets]\n     (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]\n       (reduce into (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn difference\n  \"Return a set that is the first set without elements of the remaining sets\"\n  ([s1] s1)\n  ([s1 s2] \n     (if (< (count s1) (count s2))\n       (reduce (fn [result item] \n                   (if (contains? s2 item) \n                     (disj result item) \n                     result))\n               s1 s1)\n       (reduce disj s1 s2)))\n  ([s1 s2 & sets] \n     (reduce difference s1 (conj sets s2))))\n\n\n(defn select\n  \"Returns a set of the elements for which pred is true\"\n  [pred xset]\n    (reduce (fn [s k] (if (pred k) s (disj s k)))\n            xset xset))\n\n(defn project\n  \"Returns a rel of the elements of xrel with only the keys in ks\"\n  [xrel ks]\n    (set (map #(select-keys % ks) xrel)))\n\n(defn rename-keys\n  \"Returns the map with the keys in kmap renamed to the vals in kmap\"\n  [map kmap]\n    (reduce\n     (fn [m [old new]]\n       (if (contains? map old)\n         (assoc m new (get map old))\n         m))\n     (apply dissoc map (keys kmap)) kmap))\n\n(defn rename\n  \"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\"\n  [xrel kmap]\n    (set (map #(rename-keys % kmap) xrel)))\n\n(defn index\n  \"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.\"\n  [xrel ks]\n    (reduce\n     (fn [m x]\n       (let [ik (select-keys x ks)]\n         (assoc m ik (conj (get m ik #{}) x))))\n     {} xrel))\n   \n(defn map-invert\n  \"Returns the map with the vals mapped to the keys.\"\n  [m] (reduce (fn [m [k v]] (assoc m v k)) {} m))\n\n(defn join\n  \"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.\"\n  ([xrel yrel] ;natural join\n   (if (and (seq xrel) (seq yrel))\n     (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))\n           [r s] (if (<= (count xrel) (count yrel))\n                   [xrel yrel]\n                   [yrel xrel])\n           idx (index r ks)]\n       (reduce (fn [ret x]\n                 (let [found (idx (select-keys x ks))]\n                   (if found\n                     (reduce #(conj %1 (merge %2 x)) ret found)\n                     ret)))\n               #{} s))\n     #{}))\n  ([xrel yrel km] ;arbitrary key mapping\n   (let [[r s k] (if (<= (count xrel) (count yrel))\n                   [xrel yrel (map-invert km)]\n                   [yrel xrel km])\n         idx (index r (vals k))]\n     (reduce (fn [ret x]\n               (let [found (idx (rename-keys (select-keys x (keys k)) k))]\n                 (if found\n                   (reduce #(conj %1 (merge %2 x)) ret found)\n                   ret)))\n             #{} s))))\n\n(defn subset? \n  \"Is set1 a subset of set2?\"\n  [set1 set2]\n  (and (<= (count set1) (count set2))\n       (every? #(contains? set2 %) set1)))\n\n(defn superset? \n  \"Is set1 a superset of set2?\"\n  [set1 set2]\n  (and (>= (count set1) (count set2))\n       (every? #(contains? set1 %) set2)))\n\n(comment\n(refer 'set)\n(def xs #{{:a 11 :b 1 :c 1 :d 4}\n         {:a 2 :b 12 :c 2 :d 6}\n         {:a 3 :b 3 :c 3 :d 8 :f 42}})\n\n(def ys #{{:a 11 :b 11 :c 11 :e 5}\n         {:a 12 :b 11 :c 12 :e 3}\n         {:a 3 :b 3 :c 3 :e 7 }})\n\n(join xs ys)\n(join xs (rename ys {:b :yb :c :yc}) {:a :a})\n\n(union #{:a :b :c} #{:c :d :e })\n(difference #{:a :b :c} #{:c :d :e})\n(intersection #{:a :b :c} #{:c :d :e})\n\n(index ys [:b]))\n\n","~:reader-features",["^H",["~:cljs"]],"~:cljc",false,"~:source-map-compact",["^ ","mappings",";AAYA,AAAA,AAAOA,AAAgBC,AAAEC;AAAzB,AAAA;AAGE,AAAMC,AAAI,AAACC,AAAMC,AAAQJ,AAAEC;AAA3B,AACE,AAACI,AAAKH,AAAI,AAAA,AAAAI,AAACC;AAAD,AAAS,AAAAD,AAAYJ;AAAOD;;AAE1C,AAAA;;;AAAA,AAAAO,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAAC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAI;;;;;AAAA,AAAA,AAAA,AAAMJ;AAAN,AAAA;;;AAAA,AAAA,AAAA,AAAMA,AAGFY;AAHJ,AAGQA;;;AAHR,AAAA,AAAA,AAAMZ,AAIFY,AAAGC;AAJP,AAKK,AAAI,AAAG,AAACC,AAAMF,AAAI,AAACE,AAAMD;AACvB,AAACE,AAAOC,AAAKH,AAAGD;;AAChB,AAACG,AAAOC,AAAKJ,AAAGC;;;;AAPvB,AAAA,AAAA,AAAA,AAAMb,AAQFY,AAAGC,AAAKI;AARZ,AASK,AAAMC,AAAa,AAAC7B,AAAeyB,AAAM,AAACK,AAAKF,AAAKJ,AAAGD;AAAvD,AACE,AAACG,AAAOK,AAAK,AAACZ,AAAMU,AAAc,AAACG,AAAKH;;;AAV/C;AAAA,AAAA,AAAA,AAAAZ,AAAMN;AAAN,AAAA,AAAAO,AAAA,AAAAC,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAAI,AAAA,AAAAF,AAAAF;AAAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAAK,AAAA;AAAA,AAAA,AAAAA,AAAAJ,AAAAG,AAAAJ;;;AAAA,AAAA,AAAA,AAAMN;;AAAN,AAYA,AAAA;;;AAAA,AAAAF,AAAMyB;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAAtB,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAsB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAnB;;;;;AAAA,AAAA,AAAA,AAAMmB,AAEFX;AAFJ,AAEQA;;;AAFR,AAAA,AAAA,AAAMW,AAGFX,AAAGC;;AAHP,AAIK,AAAI,AAAG,AAACC,AAAMD,AAAI,AAACC,AAAMF;AACvB,AAAOC;AAAGD;;;;;AACV,AAACG,AAAO;AAAKY,AAAOC;AAAZ,AACI,AAAI,AAACC,AAAUhB,AAAGe;AAC9BD;;AACc,AAACG,AAAKH,AAAOC;;;AAC1BhB,AAAGA;;;;;;AAVX,AAAA,AAAA,AAAA,AAAMW,AAWFX,AAAGC,AAAKI;AAXZ,AAYK,AAAMC,AAAa,AAAA,AAAAa,AAAC1C;AAAD,AAAiB,AAAG,AAAA0C,AAACjB;AAAU,AAACK,AAAKF,AAAKJ,AAAGD;AAAhE,AACE,AAACG,AAAOQ,AAAa,AAACf,AAAMU,AAAc,AAACG,AAAKH;;;AAbvD;AAAA,AAAA,AAAA,AAAAM,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAAjB,AAAAgB;AAAAA,AAAA,AAAAf,AAAAe;AAAAE,AAAA,AAAAlB,AAAAgB;AAAAA,AAAA,AAAAf,AAAAe;AAAA,AAAA,AAAAb,AAAA;AAAA,AAAA,AAAAA,AAAAc,AAAAC,AAAAF;;;AAAA,AAAA,AAAA,AAAMD;;AAAN,AAeA,AAAA;;;AAAA,AAAAzB,AAAMmC;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAAhC,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAAJ,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAgC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA7B;;;;;AAAA,AAAA,AAAA,AAAM6B,AAEFrB;AAFJ,AAEQA;;;AAFR,AAAA,AAAA,AAAMqB,AAGFrB,AAAGC;AAHP,AAIK,AAAI,AAAG,AAACC,AAAMF,AAAI,AAACE,AAAMD;AACvB,AAACE,AAAO,AAAKY,AAAOC;AAAZ,AACI,AAAI,AAACC,AAAUhB,AAAGe;AAChB,AAACE,AAAKH,AAAOC;;AACbD;;AACNf,AAAGA;;AACX,AAACG,AAAOsB,AAAKzB,AAAGC;;;;AAVvB,AAAA,AAAA,AAAA,AAAMoB,AAWFrB,AAAGC,AAAKI;AAXZ,AAYK,AAACF,AAAOkB,AAAWrB,AAAG,AAAC0B,AAAKrB,AAAKJ;;;AAZtC;AAAA,AAAA,AAAA,AAAAqB,AAAMD;AAAN,AAAA,AAAAE,AAAA,AAAA3B,AAAA0B;AAAAA,AAAA,AAAAzB,AAAAyB;AAAAE,AAAA,AAAA5B,AAAA0B;AAAAA,AAAA,AAAAzB,AAAAyB;AAAA,AAAA,AAAAvB,AAAA;AAAA,AAAA,AAAAA,AAAAwB,AAAAC,AAAAF;;;AAAA,AAAA,AAAA,AAAMD;;AAAN,AAeA;;;AAAA,AAAMM,AAEHC,AAAKC;AAFR,AAGI,AAAC1B,AAAO,AAAK2B,AAAEpD;AAAP,AAAU,AAAI,AAACkD,AAAAA,AAAAA,AAAKlD,AAAAA;AAAGoD;;AAAE,AAACZ,AAAKY,AAAEpD;;AACjCmD,AAAKA;;AAEjB;;;AAAA,AAAME,AAEHC,AAAKC;AAFR,AAGI,AAACC,AAAI,AAAA,AAAAC,AAACC;AAAD,AAAM,AAAAD,AAACE,AAAcJ;AAAID;;AAElC;;;AAAA,AAAMM,AAEHC,AAAIC;AAFP,AAGI,AAACrC,AACA,AAAAsC,AAAKG;AAAL,AAAA,AAAAF,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAQG;AAAR,AAAAF,AAAAD,AAAA,AAAA,AAAYI;AAAZ,AACE,AAAI,AAAC7B,AAAUsB,AAAIM;AACjB,AAACE,AAAMH,AAAEE,AAAI,AAACE,AAAIT,AAAIM;;AACtBD;;AACJ,AAAC/D,AAAMoE,AAAOV,AAAI,AAACW,AAAKV,AAAOA;;AAEpC;;;AAAA,AAAMW,AAEHnB,AAAKQ;AAFR,AAGI,AAACN,AAAI,AAAA,AAAAkB,AAAChB;AAAD,AAAM,AAAAgB,AAACd,AAAcE;AAAMR;;AAEpC;;;;AAAA,AAAMqB,AAGHrB,AAAKC;AAHR,AAII,AAAC9B,AACA,AAAKyC,AAAEU;AAAP,AACE,AAAMC,AAAG,AAAClB,AAAYiB,AAAErB;AAAxB,AACE,AAACc,AAAMH,AAAEW,AAAG,AAAC7B,AAAK,AAAA,AAAC8B,AAAIZ,AAAEW,AAAQD;AAHtC,AAIItB;;AAER;;;AAAA,AAAMyB,AAEHb;AAFH,AAEM,AAACzC,AAAO,AAAAuD,AAAKd;AAAL,AAAA,AAAAe,AAAAD;AAAA,AAAAf,AAAAgB,AAAA,AAAA,AAAQjF;AAAR,AAAAiE,AAAAgB,AAAA,AAAA,AAAUC;AAAV,AAAc,AAACb,AAAMH,AAAEgB,AAAElF;AAAjC,AAAwCkE;;AAE9C,AAAA;;;;;AAAA,AAAA1D,AAAM4E;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAIF9B,AAAKgC;AAJT,AAKG,AAAI,AAAK,AAACC,AAAIjC,AAAM,AAACiC,AAAID;AACvB,AAAM/B,AAAG,AAACkC,AAAa,AAACjC,AAAI,AAACgB,AAAK,AAACtD,AAAMoC,AAAQ,AAACE,AAAI,AAACgB,AAAK,AAACtD,AAAMoE;AAAnEE,AACY,AAAA,AAAA,AAAI,AAAI,AAAChE,AAAM8B,AAAM,AAAC9B,AAAM8D,AACzBhC,AAAKgC,AACLA,AAAKhC;AAHpB,AAAAW,AAAAuB,AAAA,AAAA,AACOE;AADP,AAAAzB,AAAAuB,AAAA,AAAA,AACSpC;AAGHuC,AAAI,AAAChB,AAAMe,AAAEnC;AAJnB,AAKE,AAAC9B,AAAO,AAAKmE,AAAIhB;AAAT,AACE,AAAMiB,AAAM,AAAAC,AAAK,AAACnC,AAAYiB,AAAErB;AAApB,AAAA,AAAAuC,AAAAA,AAACH,AAAAA,AAAAA;;AAAb,AACE,AAAIE;AACF,AAAA,AAAAE,AAAAC,AAACvE;AAAD,AAAS,AAAAsE,AAAC/C,AAAQ,AAAAgD,AAACC,AAASrB;AAAIgB,AAAIC;;AACpCD;;AAJd,AAKYxC;;AAXhB;;;;AALH,AAAA,AAAA,AAAMgC,AAkBF9B,AAAKgC,AAAKY;AAlBd,AAmBG,AAAAC,AAAc,AAAA,AAAA,AAAI,AAAI,AAAC3E,AAAM8B,AAAM,AAAC9B,AAAM8D,AACzBhC,AAAKgC,AAAK,AAACP,AAAWmB,AACtBZ,AAAKhC,AAAK4C;AAF3B,AAAAjC,AAAAkC,AAAA,AAAA,AAAOT;AAAP,AAAAzB,AAAAkC,AAAA,AAAA,AAAS/C;AAAT,AAAAa,AAAAkC,AAAA,AAAA,AAAWnG;AAGL2F,AAAI,AAAChB,AAAMe,AAAE,AAACU,AAAKpG;AAHzB,AAIE,AAACyB,AAAO,AAAKmE,AAAIhB;AAAT,AACE,AAAMiB,AAAM,AAAAQ,AAAK,AAACzC,AAAY,AAACD,AAAYiB,AAAE,AAACJ,AAAKxE,AAAIA;AAA3C,AAAA,AAAAqG,AAAAA,AAACV,AAAAA,AAAAA;;AAAb,AACE,AAAIE;AACF,AAAA,AAAAS,AAAAC,AAAC9E;AAAD,AAAS,AAAA6E,AAACtD,AAAQ,AAAAuD,AAACN,AAASrB;AAAIgB,AAAIC;;AACpCD;;AAJd,AAKYxC;;;AA5BjB,AAAA,AAAA,AAAMgC;;AAAN,AA8BA;;;AAAA,AAAMoB,AAEHC,AAAKC;AAFR,AAGE,AAAK,AAAI,AAAClF,AAAMiF,AAAM,AAACjF,AAAMkF,AACxB,AAAA,AAAAC,AAACC;AAAD,AAAS,AAAAD,AAACpE,AAAUmE;AAAQD;;AAEnC;;;AAAA,AAAMI,AAEHJ,AAAKC;AAFR,AAGE,AAAK,AAAI,AAAClF,AAAMiF,AAAM,AAACjF,AAAMkF,AACxB,AAAA,AAAAI,AAACF;AAAD,AAAS,AAAAE,AAACvE,AAAUkE;AAAQC;;AAEnC","names",["clojure.set/bubble-max-key","k","coll","max","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/max-key","cljs.core/cons","p1__53449#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","var_args","G__53454","clojure.set/union","args-arr__4810__auto__","len__4789__auto__","i__4790__auto__","argseq__4811__auto__","cljs.core/IndexedSeq","seq53451","G__53452","cljs.core/first","cljs.core/next","G__53453","self__4776__auto__","s1","s2","cljs.core/count","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","sets","bubbled-sets","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","cljs.core/into","cljs.core/rest","G__53460","clojure.set/intersection","seq53457","G__53458","G__53459","result","item","cljs.core/contains?","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","p1__53455#","G__53465","clojure.set/difference","seq53462","G__53463","G__53464","cljs.core/disj","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.set/select","pred","xset","s","clojure.set/project","xrel","ks","cljs.core/set","p1__53466#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/select-keys","clojure.set/rename-keys","map","kmap","p__53467","vec__53468","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","m","old","new","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/dissoc","cljs.core/keys","clojure.set/rename","p1__53471#","clojure.set/index","x","ik","cljs.core.get.cljs$core$IFn$_invoke$arity$3","clojure.set/map-invert","p__53472","vec__53473","v","G__53481","clojure.set/join","js/Error","yrel","cljs.core/seq","vec__53482","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","r","idx","ret","found","G__53485","p1__53476#","p2__53477#","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","km","vec__53486","cljs.core/vals","G__53489","p1__53478#","p2__53479#","clojure.set/subset?","set1","set2","p1__53490#","cljs.core/every?","clojure.set/superset?","p1__53492#"]]],"~:cache-keys",["~#cmap",[["^[","goog/dom/tagname.js"],[1604233662695,"~:shadow.build.compiler/resolve",["^ ","~:require-id",null,"~:deps-ids",["^H",[]],"~:deps-syms",["^P","~$goog.dom.HtmlElement"]]],["^[","goog/math/math.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","~$goog.array","~$goog.asserts"]]],["^[","goog/html/trustedtypes.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/labs/useragent/browser.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1A","~$goog.labs.userAgent.util","~$goog.object","~$goog.string.internal"]]],["^[","goog/html/safeurl.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1B","~$goog.fs.url","~$goog.html.TrustedResourceUrl","~$goog.i18n.bidi.Dir","~$goog.i18n.bidi.DirectionalString","~$goog.string.Const","~$goog.string.TypedString","^1E"]]],["^[","goog/array/array.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1B"]]],["^[","goog/debug/error.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/dom/nodetype.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/string/typedstring.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/object/object.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/dom/asserts.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1B"]]],"~:SHADOW-TIMESTAMP",[1604233907000,1604233898000],["^[","goog/math/long.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1B","~$goog.reflect"]]],["^[","goog/html/trustedresourceurl.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1B","~$goog.html.trustedtypes","^1H","^1I","^1J","^1K"]]],["^[","goog/string/internal.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/functions/functions.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/html/safestyle.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1A","^1B","~$goog.html.SafeUrl","^1J","^1K","^1E"]]],["^[","goog/dom/safe.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1B","~$goog.dom.asserts","~$goog.functions","~$goog.html.SafeHtml","~$goog.html.SafeScript","~$goog.html.SafeStyle","^1O","^1G","~$goog.html.uncheckedconversions","^1J","^1E"]]],["^[","goog/structs/map.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","~$goog.iter.Iterator","~$goog.iter.StopIteration"]]],["^[","goog/html/safehtml.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1A","^1B","~$goog.dom.TagName","~$goog.dom.tags","^1S","^1T","~$goog.html.SafeStyleSheet","^1O","^1G","^1N","^1H","^1I","~$goog.labs.userAgent.browser","^1D","^1J","^1K","^1E"]]],["^[","goog/dom/tags.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1D"]]],["^[","goog/asserts/asserts.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","~$goog.debug.Error","~$goog.dom.NodeType"]]],["^[","goog/uri/uri.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1A","^1B","~$goog.string","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"]]],["^[","goog/i18n/bidi.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/fs/url.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/base.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",[]]],["^[","goog/structs/structs.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1A","^1D"]]],["^[","goog/string/string.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","~$goog.dom.safe","^1U","^1J","^1E"]]],["^[","goog/reflect/reflect.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/labs/useragent/util.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1E"]]],["^[","goog/string/stringbuffer.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","goog/iter/iter.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1A","^1B","^1Q","~$goog.math"]]],["^[","goog/html/uncheckedconversions.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1B","^1R","^1S","^1T","^1Z","^1O","^1G","^1J","^1E"]]],["^[","goog/dom/htmlelement.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P"]]],["^[","cljs/core.cljs"],[1604233898486,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["~$goog.math.Long","~$goog.math.Integer","^22","^1D","^1A","~$goog.Uri","~$goog.string.StringBuffer"]]],["^[","goog/html/safescript.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1B","^1N","^1J","^1K"]]],["^[","goog/html/safestylesheet.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1A","^1B","^1T","^1D","^1J","^1K","^1E"]]],["^[","goog/math/integer.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1M"]]],["^[","clojure/set.cljs"],[1604233898486,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^O"]]],["^[","goog/uri/utils.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1A","^1B","^22"]]],["^[","goog/string/const.js"],[1604233662695,"^1<",["^ ","^1=",null,"^1>",["^H",[]],"^1?",["^P","^1B","^1K"]]]]],"~:clj-info",["^ ","jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/set.clj",1591214217000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/compiler.cljc",1604233898000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/env.cljc",1604233898000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/tagged_literals.cljc",1604233898000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/js_deps.cljc",1604233898000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/java/io.clj",1591214217000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/pprint.clj",1591214217000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader.clj",1591726260000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/edn.clj",1591214217000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/errors.clj",1591726260000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/instant.clj",1591214217000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64.clj",1604233898000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/data.json/0.2.6/data.json-0.2.6.jar!/clojure/data/json.clj",1591732625000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/externs.clj",1604233898000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/string.clj",1591214217000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/default_data_readers.clj",1591726260000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/util.cljc",1604233898000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/reader_types.clj",1591726260000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/core.cljc",1604233898000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojure/1.10.1/clojure-1.10.1.jar!/clojure/core.clj",1591214217000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/analyzer.cljc",1604233898000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map/base64_vlq.clj",1604233898000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/clojurescript/1.10.597/clojurescript-1.10.597.jar!/cljs/source_map.clj",1604233898000,"jar:file:/C:/Users/admin/.m2/repository/org/clojure/tools.reader/1.3.2/tools.reader-1.3.2.jar!/clojure/tools/reader/impl/inspect.clj",1591726260000],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/set.cljs","^7",11,"^8",8,"^9",11,"^:",19,"^;","Set operations such as union/intersection.","^<","Rich Hickey"],"^=",["^ ","^>","^?","^@","^A","^B","^C","^D","^E"],"^F",null,"^G",["^H",[]],"^I","^J","^M",null,"^N",["^ ","^O","^O","^P","^P"],"^Q",["^H",[]],"~:shadow/js-access-global",["^H",["Error"]],"^R",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/set.cljs","^7",19,"^8",7,"^9",19,"^:",12,"~:arglists",["^U",["~$quote",["^U",[[],["~$s1"],["^32","~$s2"],["^32","^33","~$&","~$sets"]]]]],"^;","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",["^U",[[],["^32"],["^32","^33"]]],"^30",["^U",[[],["^32"],["^32","^33"],["^32","^33","~$&","^34"]]],"~:arglists-meta",["^U",[null,null,null,null]]]],"^I","~$clojure.set/union","^6","clojure/set.cljs","^:",12,"^35",["^ ","^36",true,"^37",2,"^38",2,"^39",["^U",[[],["^32"],["^32","^33"]]],"^30",["^U",[[],["^32"],["^32","^33"],["^32","^33","~$&","^34"]]],"^3:",["^U",[null,null,null,null]]],"^39",["^U",[[],["^32"],["^32","^33"]]],"~:protocol-impl",null,"^37",2,"^3:",["^U",[null,null,null,null]],"^8",1,"^36",true,"~:methods",[["^ ","^37",0,"^36",false,"~:tag","~$cljs.core/ISet"],["^ ","^37",1,"^36",false],["^ ","^37",2,"^36",false,"^3>",["^H",[null,"~$any"]]],["^ ","^37",2,"^36",true,"^3>",["^H",[null,"^3@"]]]],"^7",19,"^9",19,"^38",2,"~:fn-var",true,"^30",["^U",[[],["^32"],["^32","^33"],["^32","^33","~$&","^34"]]],"^;","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^2[",null,"^5",["^ ","^6","clojure/set.cljs","^7",97,"^8",7,"^9",97,"^:",17,"^30",["^U",["^31",["^U",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"^I","~$clojure.set/map-invert","^6","clojure/set.cljs","^:",17,"^39",["^U",[["~$m"]]],"^3<",null,"^3:",["^U",[null,null]],"^8",1,"^36",false,"^7",97,"~:ret-tag",["^H",[null,"^3@"]],"^9",97,"^38",1,"^3A",true,"^30",["^U",["^31",["^U",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^2[",null,"^5",["^ ","^6","clojure/set.cljs","^7",101,"^8",7,"^9",101,"^:",11,"^30",["^U",["^31",["^U",[["~$xrel","~$yrel"],["^3F","^3G","~$km"]]]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^35",["^ ","^36",false,"^37",3,"^38",3,"^39",["^U",[["^3F","^3G"],["^3F","^3G","^3H"]]],"^30",["^U",[["^3F","^3G"],["^3F","^3G","^3H"]]],"^3:",["^U",[null,null]]]],"^I","~$clojure.set/join","^6","clojure/set.cljs","^:",11,"^35",["^ ","^36",false,"^37",3,"^38",3,"^39",["^U",[["^3F","^3G"],["^3F","^3G","^3H"]]],"^30",["^U",[["^3F","^3G"],["^3F","^3G","^3H"]]],"^3:",["^U",[null,null]]],"^39",["^U",[["^3F","^3G"],["^3F","^3G","^3H"]]],"^3<",null,"^37",3,"^3:",["^U",[null,null]],"^8",1,"^36",false,"^3=",[["^ ","^37",2,"^36",false,"^3>",["^H",[null,"^3@","^3?"]]],["^ ","^37",3,"^36",false,"^3>",["^H",[null,"^3@"]]]],"^7",101,"^9",101,"^38",3,"^3A",true,"^30",["^U",[["^3F","^3G"],["^3F","^3G","^3H"]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^2[",null,"^5",["^ ","^6","clojure/set.cljs","^7",61,"^8",7,"^9",61,"^:",13,"^30",["^U",["^31",["^U",[["~$pred","~$xset"]]]]],"^;","Returns a set of the elements for which pred is true"],"^I","~$clojure.set/select","^6","clojure/set.cljs","^:",13,"^39",["^U",[["^3K","^3L"]]],"^3<",null,"^3:",["^U",[null,null]],"^8",1,"^36",false,"^7",61,"^3D",["^H",[null,"^3@"]],"^9",61,"^38",2,"^3A",true,"^30",["^U",["^31",["^U",[["^3K","^3L"]]]]],"^;","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^2[",null,"^5",["^ ","^6","clojure/set.cljs","^7",31,"^8",7,"^9",31,"^:",19,"^30",["^U",["^31",["^U",[["^32"],["^32","^33"],["^32","^33","~$&","^34"]]]]],"^;","Return a set that is the intersection of the input sets","^35",["^ ","^36",true,"^37",2,"^38",2,"^39",["^U",[["^32"],["^32","^33"]]],"^30",["^U",[["^32"],["^32","^33"],["^32","^33","~$&","^34"]]],"^3:",["^U",[null,null,null]]]],"^I","~$clojure.set/intersection","^6","clojure/set.cljs","^:",19,"^35",["^ ","^36",true,"^37",2,"^38",2,"^39",["^U",[["^32"],["^32","^33"]]],"^30",["^U",[["^32"],["^32","^33"],["^32","^33","~$&","^34"]]],"^3:",["^U",[null,null,null]]],"^39",["^U",[["^32"],["^32","^33"]]],"^3<",null,"^37",2,"^3:",["^U",[null,null,null]],"^8",1,"^36",true,"^3=",[["^ ","^37",1,"^36",false],["^ ","^37",2,"^36",false,"^3>",["^H",[null,"^3@"]]],["^ ","^37",2,"^36",true,"^3>",["^H",[null,"^3@"]]]],"^7",31,"^9",31,"^38",2,"^3A",true,"^30",["^U",[["^32"],["^32","^33"],["^32","^33","~$&","^34"]]],"^;","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^2[",null,"^5",["^ ","^6","clojure/set.cljs","^7",137,"^8",7,"^9",137,"^:",16,"^30",["^U",["^31",["^U",[["~$set1","~$set2"]]]]],"^;","Is set1 a superset of set2?"],"^I","~$clojure.set/superset?","^6","clojure/set.cljs","^:",16,"^39",["^U",[["^3Q","^3R"]]],"^3<",null,"^3:",["^U",[null,null]],"^8",1,"^36",false,"^7",137,"^3D","~$boolean","^9",137,"^38",2,"^3A",true,"^30",["^U",["^31",["^U",[["^3Q","^3R"]]]]],"^;","Is set1 a superset of set2?"],"~$index",["^ ","^2[",null,"^5",["^ ","^6","clojure/set.cljs","^7",87,"^8",7,"^9",87,"^:",12,"^30",["^U",["^31",["^U",[["^3F","~$ks"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^I","~$clojure.set/index","^6","clojure/set.cljs","^:",12,"^39",["^U",[["^3F","^3V"]]],"^3<",null,"^3:",["^U",[null,null]],"^8",1,"^36",false,"^7",87,"^3D",["^H",[null,"^3@"]],"^9",87,"^38",2,"^3A",true,"^30",["^U",["^31",["^U",[["^3F","^3V"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^2[",null,"^5",["^ ","^6","clojure/set.cljs","^7",13,"^8",8,"^9",13,"^:",22,"~:private",true,"^30",["^U",["^31",["^U",[["~$k","~$coll"]]]]]],"^3Y",true,"^I","~$clojure.set/bubble-max-key","^6","clojure/set.cljs","^:",22,"^39",["^U",[["~$k","^3Z"]]],"^3<",null,"^3:",["^U",[null,null]],"^8",1,"^36",false,"^7",13,"^3D","~$clj","^9",13,"^38",2,"^3A",true,"^30",["^U",["^31",["^U",[["~$k","^3Z"]]]]]],"~$subset?",["^ ","^2[",null,"^5",["^ ","^6","clojure/set.cljs","^7",131,"^8",7,"^9",131,"^:",14,"^30",["^U",["^31",["^U",[["^3Q","^3R"]]]]],"^;","Is set1 a subset of set2?"],"^I","~$clojure.set/subset?","^6","clojure/set.cljs","^:",14,"^39",["^U",[["^3Q","^3R"]]],"^3<",null,"^3:",["^U",[null,null]],"^8",1,"^36",false,"^7",131,"^3D","^3T","^9",131,"^38",2,"^3A",true,"^30",["^U",["^31",["^U",[["^3Q","^3R"]]]]],"^;","Is set1 a subset of set2?"],"~$rename",["^ ","^2[",null,"^5",["^ ","^6","clojure/set.cljs","^7",82,"^8",7,"^9",82,"^:",13,"^30",["^U",["^31",["^U",[["^3F","~$kmap"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^I","~$clojure.set/rename","^6","clojure/set.cljs","^:",13,"^39",["^U",[["^3F","^44"]]],"^3<",null,"^3:",["^U",[null,null]],"^8",1,"^36",false,"^7",82,"^3D",["^H",["^40","^3@","^3?","~$cljs.core/MetaFn","~$clj-nil"]],"^9",82,"^38",2,"^3A",true,"^30",["^U",["^31",["^U",[["^3F","^44"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^2[",null,"^5",["^ ","^6","clojure/set.cljs","^7",72,"^8",7,"^9",72,"^:",18,"^30",["^U",["^31",["^U",[["~$map","^44"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"^I","~$clojure.set/rename-keys","^6","clojure/set.cljs","^:",18,"^39",["^U",[["^49","^44"]]],"^3<",null,"^3:",["^U",[null,null]],"^8",1,"^36",false,"^7",72,"^3D",["^H",[null,"^3@"]],"^9",72,"^38",2,"^3A",true,"^30",["^U",["^31",["^U",[["^49","^44"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^2[",null,"^5",["^ ","^6","clojure/set.cljs","^7",67,"^8",7,"^9",67,"^:",14,"^30",["^U",["^31",["^U",[["^3F","^3V"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"^I","~$clojure.set/project","^6","clojure/set.cljs","^:",14,"^39",["^U",[["^3F","^3V"]]],"^3<",null,"^3:",["^U",[null,null]],"^8",1,"^36",false,"^7",67,"^3D",["^H",["^40","^3@","^3?","^46","^47"]],"^9",67,"^38",2,"^3A",true,"^30",["^U",["^31",["^U",[["^3F","^3V"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^2[",null,"^5",["^ ","^6","clojure/set.cljs","^7",46,"^8",7,"^9",46,"^:",17,"^30",["^U",["^31",["^U",[["^32"],["^32","^33"],["^32","^33","~$&","^34"]]]]],"^;","Return a set that is the first set without elements of the remaining sets","^35",["^ ","^36",true,"^37",2,"^38",2,"^39",["^U",[["^32"],["^32","^33"]]],"^30",["^U",[["^32"],["^32","^33"],["^32","^33","~$&","^34"]]],"^3:",["^U",[null,null,null]]]],"^I","~$clojure.set/difference","^6","clojure/set.cljs","^:",17,"^35",["^ ","^36",true,"^37",2,"^38",2,"^39",["^U",[["^32"],["^32","^33"]]],"^30",["^U",[["^32"],["^32","^33"],["^32","^33","~$&","^34"]]],"^3:",["^U",[null,null,null]]],"^39",["^U",[["^32"],["^32","^33"]]],"^3<",null,"^37",2,"^3:",["^U",[null,null,null]],"^8",1,"^36",true,"^3=",[["^ ","^37",1,"^36",false],["^ ","^37",2,"^36",false,"^3>",["^H",[null,"^3@"]]],["^ ","^37",2,"^36",true,"^3>",["^H",[null,"^3@"]]]],"^7",46,"^9",46,"^38",2,"^3A",true,"^30",["^U",[["^32"],["^32","^33"],["^32","^33","~$&","^34"]]],"^;","Return a set that is the first set without elements of the remaining sets"]],"^S",["^ ","^O","^O"],"^W",["^ "],"^X",["^ "],"^Y",["^P","^O"]],"^L","^J","~:ns-specs",["^ "],"~:ns-spec-vars",["^H",[]],"~:compiler-options",["^1;",[["^4A","~:static-fns"],true,["^4A","~:shadow-tweaks"],null,["^4A","~:elide-asserts"],true,["^4A","~:optimize-constants"],null,["^4A","^12"],null,["^4A","~:external-config"],null,["^4A","~:tooling-config"],null,["^4A","~:emit-constants"],null,["^4A","~:load-tests"],false,["^4A","~:form-size-threshold"],null,["^4A","~:infer-externs"],true,["^4A","^14"],null,["~:js-options","~:js-provider"],"~:shadow",["~:mode"],"~:release",["^4A","~:fn-invoke-direct"],null,["^4A","~:source-map"],null]]]